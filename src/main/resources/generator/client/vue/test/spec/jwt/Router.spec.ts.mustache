import { AppVue } from '@/common/primary/app';
import { LoginVue } from '@/common/primary/login';
import router from '@/router/router';
import { createTestingPinia } from '@pinia/testing';
import { shallowMount, VueWrapper } from '@vue/test-utils';
import { AuthenticationService } from '@/common/domain/AuthenticationService';
import { stubAuthenticationService } from '../common/domain/AuthenticationService.fixture';
import { stubLogger } from '../common/domain/Logger.fixture';
import { Logger } from '@/common/domain/Logger';

let wrapper: VueWrapper;

interface WrapperOptions {
  authenticationService: AuthenticationService;
  logger: Logger;
}

const wrap = (wrapperOptions?: Partial<WrapperOptions>) => {
  const { authenticationService, logger }: WrapperOptions = {
    authenticationService: stubAuthenticationService(),
    logger: stubLogger(),
    ...wrapperOptions,
  };

  wrapper = shallowMount(AppVue, {
    global: {
      stubs: ['router-link'],
      provide: {
        authenticationService,
        logger,
        router,
      },
      plugins: [createTestingPinia()],
    },
  });
};

describe('Router', () => {

  afterAll(async () => new Promise(resolve => window.setTimeout(resolve, 0)));
  it('Should redirect to App by default', async () => {
    const authenticationService = stubAuthenticationService();
    const logger = stubLogger();
    await wrap({ authenticationService, logger });
    router.push('/');
    await router.isReady();

    await wrapper.vm.$nextTick();

    expect(wrapper.findComponent(AppVue)).toBeTruthy();
  });

  it('Should go to LoginVue', async () => {
    router.push('/Login');

    await wrapper.vm.$nextTick();

    expect(wrapper.findComponent(LoginVue)).toBeTruthy();
  });
});
